USE CLIENT;
EXEC sp_dbcmptlevel 'CLIENT', 140;

CREATE TABLE MEMBER
(
    MEMBER_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    PASSWORD VARCHAR(20) NOT NULL,
    NAME VARCHAR(30) NOT NULL,
    EMAIL VARCHAR(40) NOT NULL UNIQUE,
    PHONE VARCHAR(10) NOT NULL UNIQUE,
    ADDRESS VARCHAR (100),
    BIO VARCHAR(100),
    GITHUB VARCHAR(30),
    LINKEDIN VARCHAR(30)
);

CREATE TABLE SCHOOL
(
    SCHOOL_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    LOCATION VARCHAR(100),
    NAME VARCHAR(80) NOT NULL
);

CREATE TABLE SCHOOLING
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SCHOOL_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES SCHOOL(SCHOOL_ID) ON UPDATE CASCADE,
    PASSING_LEVEL INT NOT NULL CHECK (PASSING_LEVEL=10 OR PASSING_LEVEL=12),
    STREAM VARCHAR(10) NOT NULL CHECK (STREAM IN ('SCIENCE','COMMERCE','ARTS','HUMANITIES')),
    PASSING_YEAR INT NOT NULL CHECK (LEN(CONVERT(VARCHAR(10),PASSING_YEAR))=4), 
    SCORE FLOAT NOT NULL CHECK(SCORE>=0 AND SCORE<=100),
    PRIMARY KEY(MEMBER_ID, PASSING_LEVEL)
);

CREATE TABLE DEGREE_INFO
(
    DEGREE_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    TYPE_OF_GRADUATION VARCHAR(20) NOT NULL,
    DEGREE VARCHAR(20) NOT NULL,
    MAJOR VARCHAR(20) NOT NULL
);

CREATE TABLE HIGHER_EDUCATION
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    DEGREE_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES DEGREE_INFO(DEGREE_ID) ON UPDATE CASCADE,
    GPA FLOAT NOT NULL CHECK (GPA>=0 AND GPA<=10),
    UNIVERSITY VARCHAR(30) NOT NULL,
    PRIMARY KEY(MEMBER_ID, DEGREE_ID)
);

CREATE TABLE SKILLS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    SKILL_NAME VARCHAR(20) NOT NULL,
    EXPERIENCE_LEVEL INT CHECK (EXPERIENCE_LEVEL>0 AND EXPERIENCE_LEVEL<=10),
    PRIMARY KEY(MEMBER_ID, SKILL_NAME)
);

CREATE TABLE PROJECTS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    PROJECT_NAME VARCHAR(30) NOT NULL,
    DESCRIPTION VARCHAR(100),
    PRIMARY KEY(MEMBER_ID, PROJECT_NAME)
);

CREATE TABLE JOB
(
    JOB_ID VARCHAR(10) NOT NULL PRIMARY KEY,
    TITLE VARCHAR(20) NOT NULL,
    LOCATION VARCHAR(20) NOT NULL,
    DESCRIPTION VARCHAR(100),
    EMPLOYER VARCHAR(20) NOT NULL
);

CREATE TABLE EXPERIENCE
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    JOB_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES JOB(JOB_ID) ON UPDATE CASCADE,
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    DURATION INT,
    PRIMARY KEY(MEMBER_ID, JOB_ID) 
);

CREATE TABLE ACCOMPLISHMENTS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    ACCOMPLISHMENT_NAME VARCHAR(30) NOT NULL,
    DESCRIPTION VARCHAR(100),
    PRIMARY KEY(MEMBER_ID, ACCOMPLISHMENT_NAME)
);

CREATE TABLE CERTIFICATIONS
(
    MEMBER_ID VARCHAR(10) NOT NULL FOREIGN KEY REFERENCES MEMBER(MEMBER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    CERTIFICATION_URL VARCHAR(30) NOT NULL UNIQUE,
    CERTIFICATE_NAME VARCHAR(100) NOT NULL,
    PRIMARY KEY(CERTIFICATION_URL)
);

GO
CREATE TRIGGER ADD_DURATION 
ON EXPERIENCE
AFTER INSERT
AS BEGIN
    DECLARE @PRESENT DATE;
    SET @PRESENT = GETDATE();
    UPDATE EXPERIENCE
    SET EXPERIENCE.DURATION = 
    (CASE
        WHEN END_DATE IS NULL THEN DATEDIFF(YEAR, START_DATE, @PRESENT)
        WHEN END_DATE IS NOT NULL THEN DATEDIFF(YEAR, START_DATE, END_DATE)
    END);
END;

/* DELETE TRIGGER
DROP TRIGGER ADD_DURATION;
*/

/* DELETES ALL TABLES TO START OVER
DECLARE @Sql NVARCHAR(500) DECLARE @Cursor CURSOR
SET @Cursor = CURSOR FAST_FORWARD FOR
SELECT DISTINCT sql = 'ALTER TABLE [' + tc2.TABLE_SCHEMA + '].[' +  tc2.TABLE_NAME + '] DROP [' + rc1.CONSTRAINT_NAME + '];'
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc1
LEFT JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc2 ON tc2.CONSTRAINT_NAME =rc1.CONSTRAINT_NAME
OPEN @Cursor FETCH NEXT FROM @Cursor INTO @Sql
WHILE (@@FETCH_STATUS = 0)
BEGIN
Exec sp_executesql @Sql
FETCH NEXT FROM @Cursor INTO @Sql
END
CLOSE @Cursor DEALLOCATE @Cursor
EXEC sp_MSforeachtable 'DROP TABLE ?'
*/

/* DISPLAYS ALL TABLES
DECLARE @sqlText VARCHAR(MAX)
SET @sqlText = ''
SELECT @sqlText = @sqlText + ' SELECT * FROM ' + QUOTENAME(name) + CHAR(13) FROM sys.tables
EXEC(@sqlText)
*/